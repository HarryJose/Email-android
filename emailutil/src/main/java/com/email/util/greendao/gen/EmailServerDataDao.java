package com.email.util.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.email.util.models.EmailServerData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMAIL_SERVER_DATA".
*/
public class EmailServerDataDao extends AbstractDao<EmailServerData, Long> {

    public static final String TABLENAME = "EMAIL_SERVER_DATA";

    /**
     * Properties of entity EmailServerData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SendServerString = new Property(1, String.class, "sendServerString", false, "SENDSERVERSTRING");
        public final static Property ReceiverServerString = new Property(2, String.class, "receiverServerString", false, "RECEIVERSERVERSTRING");
        public final static Property EmailNameString = new Property(3, String.class, "emailNameString", false, "EMAIL");
        public final static Property EmailPasswordString = new Property(4, String.class, "emailPasswordString", false, "PASSWORD");
    }


    public EmailServerDataDao(DaoConfig config) {
        super(config);
    }
    
    public EmailServerDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMAIL_SERVER_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SENDSERVERSTRING\" TEXT," + // 1: sendServerString
                "\"RECEIVERSERVERSTRING\" TEXT," + // 2: receiverServerString
                "\"EMAIL\" TEXT," + // 3: emailNameString
                "\"PASSWORD\" TEXT);"); // 4: emailPasswordString
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMAIL_SERVER_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmailServerData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sendServerString = entity.getSendServerString();
        if (sendServerString != null) {
            stmt.bindString(2, sendServerString);
        }
 
        String receiverServerString = entity.getReceiverServerString();
        if (receiverServerString != null) {
            stmt.bindString(3, receiverServerString);
        }
 
        String emailNameString = entity.getEmailNameString();
        if (emailNameString != null) {
            stmt.bindString(4, emailNameString);
        }
 
        String emailPasswordString = entity.getEmailPasswordString();
        if (emailPasswordString != null) {
            stmt.bindString(5, emailPasswordString);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmailServerData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sendServerString = entity.getSendServerString();
        if (sendServerString != null) {
            stmt.bindString(2, sendServerString);
        }
 
        String receiverServerString = entity.getReceiverServerString();
        if (receiverServerString != null) {
            stmt.bindString(3, receiverServerString);
        }
 
        String emailNameString = entity.getEmailNameString();
        if (emailNameString != null) {
            stmt.bindString(4, emailNameString);
        }
 
        String emailPasswordString = entity.getEmailPasswordString();
        if (emailPasswordString != null) {
            stmt.bindString(5, emailPasswordString);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EmailServerData readEntity(Cursor cursor, int offset) {
        EmailServerData entity = new EmailServerData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sendServerString
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiverServerString
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // emailNameString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // emailPasswordString
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmailServerData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSendServerString(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiverServerString(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmailNameString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmailPasswordString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmailServerData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmailServerData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmailServerData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
